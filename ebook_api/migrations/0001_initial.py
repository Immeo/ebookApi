# Generated by Django 5.1 on 2024-09-18 21:43

import django.db.models.deletion
import ebook_api.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Authors',
            fields=[
                ('authors_id', models.AutoField(primary_key=True, serialize=False)),
                ('authors_first_name', models.CharField(max_length=800)),
                ('authors_middle_name', models.CharField(blank=True, max_length=800, null=True)),
                ('authors_last_name', models.CharField(max_length=800)),
                ('authors_full_name', models.CharField(max_length=800)),
                ('authors_slug', models.SlugField()),
            ],
            options={
                'db_table': 'authors',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Genres',
            fields=[
                ('genres_id', models.AutoField(primary_key=True, serialize=False)),
                ('genres_name', models.CharField(max_length=800)),
                ('genres_slug', models.SlugField()),
            ],
            options={
                'db_table': 'genres',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Publishers',
            fields=[
                ('publishers_id', models.AutoField(primary_key=True, serialize=False)),
                ('publishers_name', models.CharField(max_length=800)),
                ('publishers_slug', models.SlugField()),
            ],
            options={
                'db_table': 'publishers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('costum_users_id', models.AutoField(primary_key=True, serialize=False)),
                ('costum_users_name', models.CharField(max_length=800, unique=True)),
                ('costum_users_email', models.EmailField(max_length=800, unique=True)),
                ('costum_users_balance', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'costum_users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('books_id', models.AutoField(primary_key=True, serialize=False)),
                ('title_books', models.CharField(max_length=800)),
                ('description_books', models.TextField(blank=True, null=True)),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('link_to_file', models.FileField(blank=True, max_length=900, null=True, upload_to=ebook_api.models.book_path_local)),
                ('cover_image_path', models.FileField(blank=True, max_length=900, null=True, upload_to=ebook_api.models.book_path_local)),
                ('available', models.BooleanField(blank=True, null=True)),
                ('book_slug', models.SlugField()),
                ('author_books', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='author_books', to='ebook_api.authors')),
                ('genre_books', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='genre_books', to='ebook_api.genres')),
                ('publisher_books', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='publisher_books', to='ebook_api.publishers')),
            ],
            options={
                'db_table': 'books',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('orders_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('book', models.ManyToManyField(blank=True, null=True, related_name='book_orders', to='ebook_api.books')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'orders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.DecimalField(decimal_places=1, default=1, max_digits=2)),
                ('what_book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='book_rate', to='ebook_api.books')),
                ('who_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_rate', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rating',
                'managed': True,
            },
        ),
    ]
